@use "sass:color";
@use "styles/functions.module.scss" as *;
@use "styles/variables.module" as *;

// breakpoints
$mobile: rem(480);
$tablet: rem(768);
$desktop: rem(1024);
$large-desktop: rem(1280);


@mixin minWidth($breakpoint) {
  @if $breakpoint =='mobile' {
    @media (min-width: #{$mobile}) {
      @content;
    }
  }

  @else if $breakpoint =='tablet' {
    @media (min-width: #{$tablet}) {
      @content;
    }
  }

  @else if $breakpoint =='desktop' {
    @media (min-width: #{$desktop}) {
      @content;
    }
  }

  @else if $breakpoint =='large-desktop' {
    @media (min-width: #{$large-desktop}) {
      @content;
    }
  }
}

@mixin gridbgColor($color: $accent) {
  background-color: color.adjust($color, $hue: 3deg);
  @include gridBackground($color, 3%, "vertical");
}

@mixin underlineOnHover($color: $secondary) {
  position: relative;

  &::after {
    content: '';
    width: 0;
    height: 5px;

    position: absolute;
    left: 0;
    top: 100%;

    background: linear-gradient(to right, $color 0%, $color 100%);
    transition: width 0.3s ease-in-out;
    pointer-events: none;
  }

  &:hover::after {
    width: 100%;
  }
}

@mixin gridBackground($color, $lightenPercentage, $type: "grid") {
  background-size: 30px 30px;

  @if $type =="horizontal" {
    background-image:
      linear-gradient(to bottom, color.adjust($color, $lightness: $lightenPercentage) 1px, transparent 1px);
  }

  @else if $type =="vertical" {
    background-image:
      linear-gradient(to right, color.adjust($color, $lightness: $lightenPercentage) 1px, transparent 1px),
  }

  @else if $type =="grid" {
    background-image:
      linear-gradient(to right, color.adjust($color, $lightness: $lightenPercentage) 1px, transparent 1px),
      linear-gradient(to bottom, color.adjust($color, $lightness: $lightenPercentage) 1px, transparent 1px);
  }
}

@mixin highlight($color: $accent) {
  .highlight {
    color: $color;
    position: relative;

    &::before,
    &::after {
      content: '';
      position: absolute;
      top: 75%;
      left: 0;
      width: 100%;
      height: 8px;
      background-image: linear-gradient(to right, rgba(255, 215, 0, 0.5), rgba(255, 215, 0, 0));
    }
  }
}

@mixin borderGradient($duration: 10000ms) {
  $color1: rgba(168, 239, 255, 1);
  $color2: rgba(168, 239, 255, 0.1);

  border: 1px solid transparent;
  border-image: conic-gradient(from var(--angle), $color2, $color1 0.1turn, $color1 0.15turn, $color2 0.25turn) 30;
  animation: borderRotate $duration cubic-bezier(.78, -0.02, .11, 1.04) infinite;

  @keyframes borderRotate {
    100% {
      --angle: 420deg;
    }
  }
}

@property --angle {
  syntax: '<angle>';
  initial-value: 90deg;
  inherits: true;
}

@mixin ctaBtn() {
  display: flex;
  flex-wrap: wrap;
  gap: rem(16);

  button {
    flex-grow: 1;
    justify-content: center;

    @include minWidth('mobile') {
      flex-grow: unset;
    }
  }
}

@mixin blockLayoutStart() {
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  position: relative;
  gap: rem(18);
}

@mixin gridLayout($mobile: 150px, $tablet: 200px, $desktop: 250px) {
  width: 100%;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($mobile, 1fr));
  gap: rem(18);

  @include minWidth('tablet') {
    grid-template-columns: repeat(auto-fit, minmax($tablet, 1fr));
  }

  @include minWidth('desktop') {
    grid-template-columns: repeat(auto-fit, minmax($desktop, 1fr));
  }
}

@mixin blockLayout() {
  width: 100%;
  max-width: 1440px;
  margin-inline: auto;
  margin-block: 40px;
  padding-inline: 20px;
  display: flex;
  flex-direction: column;
  justify-content: space-evenly;
  position: relative;
  gap: rem(18);

  @include minWidth('tablet') {
    align-items: center;
    margin-block: 80px;
  }

  @include minWidth('desktop') {
    .desc {
      max-width: 60%;
    }
  }

  .ctaBtns {
    @include ctaBtn;
  }
}

@mixin contentSizing() {
  .chip {
    display: flex;
    align-items: flex-end;
    gap: rem(8);

    font-size: $small;
    position: absolute;
    bottom: 101%;
    left: 0;
  }

  .title {
    @include highlight;

    @include minWidth('mobile') {
      font-size: $h4;
      line-height: rem(45);
    }

    @include minWidth('tablet') {
      font-size: $h3;
      line-height: rem(55);
      text-align: center;
    }

    @include minWidth('desktop') {
      font-size: $h1;
      line-height: rem(65);
    }
  }

  .desc {
    word-wrap: break-word;
    font-size: $small;


    @include minWidth('tablet') {
      font-size: $regular;
      text-align: center;
    }

    @include minWidth('desktop') {
      font-size: $medium;
    }
  }
}


@mixin sectionImage () {
  width: 100%;
  min-width: 50%;
  height: calc(55vh - rem(20));
  max-height: 300px;
  display: grid;
  place-items: center;
  border-radius: 10px;
  overflow: hidden;

  @include minWidth('tablet') {
    max-height: 500px;
  }

  @include minWidth('desktop') {
    max-height: 600px;
  }

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }
}

/*works with the sectionWrapper component*/
@mixin sectionTemplate() {
  width: 100%;

  &:nth-child(odd) {
    @include minWidth('tablet') {
      flex-direction: row-reverse;
    }
  }

  .sectionContent {
    width: 100%;
    position: relative;
    display: flex;
    flex-direction: column;
    gap: rem(18);

    .chip {
      display: flex;
      align-items: flex-end;
      gap: rem(8);

      font-size: $small;
      position: absolute;
      bottom: 101%;
      left: 0;
    }

    .title {
      @include highlight;

      @include minWidth('mobile') {
        font-size: $h5;
      }

      @include minWidth('desktop') {
        font-size: $h4;
      }
    }

    .desc {
      font-size: $small;

      @include minWidth('tablet') {
        font-size: $regular;
      }
    }

    .ctaBtns {
      @include ctaBtn;
    }
  }

  .sectionImage {
    @include sectionImage
  }
}

@mixin darkBgImg($bgImg: '/images/as1.webp') {
  color: $white;
  background-image: linear-gradient(rgba(0, 0, 0, 0.88), rgba(0, 0, 0, 0.88)), url($bgImg);
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
  width: 100%;
  margin-bottom: -80px;
  padding-block: 120px;
  padding-inline: 20px;

  .sectionWrapper {
    width: 100%;
    max-width: 1440px;
    margin-inline: auto;
    display: flex;
    flex-direction: column;
    justify-content: space-evenly;
    gap: rem(18);
    color: $white;

    @include contentSizing;

    .ctaBtns {
      @include ctaBtn;
    }
  }
}

@mixin cardBlock() {
  display: flex;
  padding: 10px;
  flex-direction: column;
  gap: rem(12);

  .cardIcon {
    color: $secondary;
  }

  .imageContainer {
    width: 100%;
    border-radius: 10px;
    overflow: hidden;

    img {
      width: 100%;
      height: 100%;
      object-fit: contain;
    }
  }

  .content {
    display: flex;
    flex-direction: column;
    text-align: start;
    gap: rem(8);

    .text {
      font-size: $tiny;

      @include minWidth('tablet') {
        font-size: $small;
      }
    }

    .title {
      &.largeTitles {
        font-size: $regular;

        @include minWidth('tablet') {
          font-size: $medium;
        }

        @include minWidth('desktop') {
          font-size: $large;
        }
      }
    }


    .title,
    .subTitle {
      font-size: $small;
      line-height: 24px;

      @include minWidth('tablet') {
        font-size: $regular;
      }
    }
  }
}

@mixin nestedSectionSizing {
  .text {
    font-size: $tiny;

    @include minWidth('tablet') {
      font-size: $small;
    }

    @include minWidth('desktop') {
      font-size: $regular;
    }
  }

  .title {
    font-size: $medium;
    display: flex;
    flex-direction: column;
    gap: rem(8);


    @include minWidth('tablet') {
      font-size: $large;
    }
  }
}
